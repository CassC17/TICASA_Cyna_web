generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  nom        String     @db.VarChar(255)
  prenom     String     @db.VarChar(255)
  email      String      @unique @db.VarChar(191)  
  password   String      @db.VarChar(255)
  isAdmin    Boolean    @default(false)
  isLoggedIn Boolean    @default(false)
  userInfo   UserInfo[]
  order      Order[]
  activeSubscription ActiveSubscription[]
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  totalprice      Float
  delivered  Int        @default(0)
  buyDate    DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[] 
}

model OrderItem {
  id            Int      @id @default(autoincrement())
  orderId       Int
  productId     Int?
  productPrice  Float?   @db.Float
  productQty    Int      @default(1)
  price         Float    @db.Float
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id                 Int                 @id @default(autoincrement())
  name               String             @db.VarChar(255)
  price              Float              @db.Float
  fournisseur        String             @db.VarChar(255)
  activePromoId      Int?
  categoryId         Int
  description        String             @db.VarChar(255) @default("placeholder")
  image              String             @db.VarChar(255) @default("placeholder")
  disponibility      Boolean            @default(true)
  orderItem         OrderItem[]
  promotions         Promotion?          @relation(fields: [activePromoId], references: [id], onDelete: Cascade, map: "product_ibfk_1")
  category           ProductCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "product_ibfk_2")
  promotedProducts   PromotedProduct[]
  activeSubscription ActiveSubscription[]
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String   @db.VarChar(191)
  description String   @db.VarChar(255)
  products    Product[]
}

model PromotedProduct {
  id         Int     @id @default(autoincrement())
  productId  Int
  name       String? @db.VarChar(255)
  price      Float?  @db.Float
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "promoted_products_ibfk_1")
}

model Promotion {
  id              Int       @id @default(autoincrement())
  name            String   @db.VarChar(255)
  priceReduction  Int?
  products        Product[]
}

model UserInfo {
  id           Int     @id @default(autoincrement())
  userId       Int?
  paymentMean  String? @db.VarChar(255)
  paymentNum   String? @db.VarChar(255)
  paymentDate  DateTime?    @default(now())
  user         User?   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_info_ibfk_1")
}

model ActiveSubscription {
  id         Int     @id @default(autoincrement())
  userId     Int
  productId  Int
  startDate  DateTime    @default(now())
  endDate    DateTime    @default(now())
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "active_subscription_ibfk_1")
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "active_subscription_ibfk_2")
}
